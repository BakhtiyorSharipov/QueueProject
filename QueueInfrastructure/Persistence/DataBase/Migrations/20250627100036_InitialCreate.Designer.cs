// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QueueInfrastructure.Persistence.DataBase;

#nullable disable

namespace QueueInfrastructure.Persistence.DataBase.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20250627100036_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Model.BlockedCustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BannedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CompanyEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("DoesBandForever")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEntityId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("BlockedCustomers", (string)null);
                });

            modelBuilder.Entity("Domain.Model.CompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("EmailAddress", "PhoneNumber");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("Domain.Model.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockedCustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("EmailAddres")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("EmailAddres", "PhoneNumber");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Domain.Model.EmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ServiceEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("EmailAddress", "PhoneNumber");

                    b.HasIndex("ServiceEntityId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Domain.Model.QueueEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CancelReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmployeeEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServiceEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerEntityId");

                    b.HasIndex("EmployeeEntityId");

                    b.HasIndex("ServiceEntityId");

                    b.ToTable("Queues", (string)null);
                });

            modelBuilder.Entity("Domain.Model.ReviewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<int>("QueueEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("QueueId")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerEntityId");

                    b.HasIndex("EmployeeEntityId");

                    b.HasIndex("QueueEntityId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("Domain.Model.ServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEntityId");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("Domain.Model.BlockedCustomerEntity", b =>
                {
                    b.HasOne("Domain.Model.CompanyEntity", "CompanyEntity")
                        .WithMany()
                        .HasForeignKey("CompanyEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.CustomerEntity", "CustomerEntity")
                        .WithOne("BlockedCustomerEntity")
                        .HasForeignKey("Domain.Model.BlockedCustomerEntity", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyEntity");

                    b.Navigation("CustomerEntity");
                });

            modelBuilder.Entity("Domain.Model.EmployeeEntity", b =>
                {
                    b.HasOne("Domain.Model.ServiceEntity", "ServiceEntity")
                        .WithMany("EmployeeEntities")
                        .HasForeignKey("ServiceEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceEntity");
                });

            modelBuilder.Entity("Domain.Model.QueueEntity", b =>
                {
                    b.HasOne("Domain.Model.CustomerEntity", "CustomerEntity")
                        .WithMany("QueueEntities")
                        .HasForeignKey("CustomerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.EmployeeEntity", "EmployeeEntity")
                        .WithMany("QueueEntities")
                        .HasForeignKey("EmployeeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.ServiceEntity", "ServiceEntity")
                        .WithMany()
                        .HasForeignKey("ServiceEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerEntity");

                    b.Navigation("EmployeeEntity");

                    b.Navigation("ServiceEntity");
                });

            modelBuilder.Entity("Domain.Model.ReviewEntity", b =>
                {
                    b.HasOne("Domain.Model.CustomerEntity", "CustomerEntity")
                        .WithMany("ReviewEntities")
                        .HasForeignKey("CustomerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.EmployeeEntity", "EmployeeEntity")
                        .WithMany()
                        .HasForeignKey("EmployeeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.QueueEntity", "QueueEntity")
                        .WithMany()
                        .HasForeignKey("QueueEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerEntity");

                    b.Navigation("EmployeeEntity");

                    b.Navigation("QueueEntity");
                });

            modelBuilder.Entity("Domain.Model.ServiceEntity", b =>
                {
                    b.HasOne("Domain.Model.CompanyEntity", "CompanyEntity")
                        .WithMany("ServiceEntities")
                        .HasForeignKey("CompanyEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyEntity");
                });

            modelBuilder.Entity("Domain.Model.CompanyEntity", b =>
                {
                    b.Navigation("ServiceEntities");
                });

            modelBuilder.Entity("Domain.Model.CustomerEntity", b =>
                {
                    b.Navigation("BlockedCustomerEntity")
                        .IsRequired();

                    b.Navigation("QueueEntities");

                    b.Navigation("ReviewEntities");
                });

            modelBuilder.Entity("Domain.Model.EmployeeEntity", b =>
                {
                    b.Navigation("QueueEntities");
                });

            modelBuilder.Entity("Domain.Model.ServiceEntity", b =>
                {
                    b.Navigation("EmployeeEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
